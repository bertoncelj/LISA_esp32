#ifndef param_h
#define param_h

#define DEBUG_UART Serial1

//debug is serial 1
#define DEBUG_IHL
#ifdef DEBUG_IHL
#define debug_print(msg) Serial1.print(msg)
#define debug_hex(msg) Serial1.print(msg, HEX)
#define debug_println(msg) Serial1.println(msg)
#define debug_hexln(msg) Serial1.println(msg, HEX)
#define debug_array(msg, size) Serial1.write(msg, size)
#else
#define debug_print(msg)
#define debug_hex(msg)
#define debug_println(msg)
#define debug_hexln(msg)
#define debug_array(msg, size)
#endif

#define MAX_REC_ARR_LEN 128

// teperature
byte r_arr_Temp[] = {0x01, 0x52, 0x31, 0x02, 0x30, 0x30, 0x3A, 0x30, 0x32, 0x3A, 0x30, 0x37, 0x28, 0x29, 0x03, 0x66}; 
int lisa_temp;

// battery Voltage in mV
byte r_arr_Vbat[] = {0x01, 0x52, 0x31, 0x02, 0x30, 0x30, 0x3A, 0x30, 0x32, 0x3A, 0x30, 0x39, 0x28, 0x29, 0x03, 0x68}; 
int lisa_Vbat;

// Voltage U1
byte r_arr_U1[] = {0x01, 0x52, 0x31, 0x02, 0x30, 0x30, 0x3A, 0x30, 0x34, 0x3A, 0x30, 0x30, 0x28, 0x29, 0x03, 0x67}; 
int lisa_U1;

//Voltage U2
byte r_arr_U2[] = {0x01, 0x52, 0x31, 0x02, 0x30, 0x30, 0x3A, 0x30, 0x34, 0x3A, 0x30, 0x31, 0x28, 0x29, 0x03, 0x66}; 
int lisa_U2;

//Voltage Upov average
byte r_arr_Upov[] = {0x01, 0x52, 0x31, 0x02, 0x30, 0x30, 0x3A, 0x30, 0x35, 0x3A, 0x33, 0x30, 0x28, 0x29, 0x03, 0x65}; 
int lisa_Upov;

//ANG angle U1 U2
byte r_arr_ANG[] = {0x01, 0x52, 0x31, 0x02, 0x30, 0x30, 0x3A, 0x30, 0x34, 0x3A, 0x30, 0x39, 0x28, 0x29, 0x03, 0x6E}; 
int lisa_ANG;

//ANG_1
byte r_arr_ANG1[] = {0x01, 0x52, 0x31, 0x02, 0x30, 0x30, 0x3A, 0x30, 0x34, 0x3A, 0x30, 0x33, 0x28, 0x29, 0x03, 0x64}; 
int lisa_ANG1;

//ANG_2
byte r_arr_ANG2[] = {0x01, 0x52, 0x31, 0x02, 0x30, 0x30, 0x3A, 0x30, 0x34, 0x3A, 0x30, 0x34, 0x28, 0x29, 0x03, 0x63}; 
int lisa_ANG2;

//Volage U3
byte r_arr_U3[] = {0x01, 0x52, 0x31, 0x02, 0x30, 0x30, 0x3A, 0x30, 0x34, 0x3A, 0x30, 0x35, 0x28, 0x29, 0x03, 0x62}; 
int lisa_U3;

//Voltage U4
byte r_arr_U4[] = {0x01, 0x52, 0x31, 0x02, 0x30, 0x30, 0x3A, 0x30, 0x34, 0x3A, 0x30, 0x36, 0x28, 0x29, 0x03, 0x61}; 
int lisa_U4;

//ANG_tot1 total
byte r_arr_ANG_tot1[] = {0x01, 0x52, 0x31, 0x02, 0x30, 0x30, 0x3A, 0x30, 0x35, 0x3A, 0x33, 0x31, 0x28, 0x29, 0x03, 0x64}; 
int lisa_ANG_tot1;

//ANG_3
byte r_arr_ANG3[] = {0x01, 0x52, 0x31, 0x02, 0x30, 0x30, 0x3A, 0x30, 0x34, 0x3A, 0x30, 0x37, 0x28, 0x29, 0x03, 0x60}; 
int lisa_ANG3;

//ANG_4
byte r_arr_ANG4[] = {0x01, 0x52, 0x31, 0x02, 0x30, 0x30, 0x3A, 0x30, 0x34, 0x3A, 0x30, 0x38, 0x28, 0x29, 0x03, 0x6F}; 
int lisa_ANG4;


//Send messages
byte send_break[] = {0x01, 0x42, 0x30, 0x03, 0x71};
byte send_sign[] = {0x2F, 0x3F, 0x21, 0x0D, 0x0A};
byte send_nullpetena[] = {0x06, 0x30, 0x35, 0x31, 0x0D, 0x0A};

//Send read
byte send_read_U1[] = {0x01, 0x52, 0x31, 0x02, 0x30, 0x30, 0x3A, 0x30, 0x32, 0x3A, 0x30, 0x37, 0x28, 0x29};   //read temperature 000207
//byte send_read_temp2[] = {0x01, 0x52, 0x31, 0x02, 0x30, 0x30, 0x3A, 0x30, 0x34, 0x3A, 0x30, 0x30, 0x28, 0x29, 0x03, 0x67};


byte send_read_temp2[] = {0x01, 0x52, 0x31, 0x02, 0x30, 0x30, 0x3A, 0x30, 0x32, 0x3A, 0x30, 0x39, 0x28, 0x29, 0x03, 0x68}; //branje bat 00 0209

byte rec_LISA_key[] = {0x2F, 0x4C, 0x31, 0x35, 0x41, 0x5F, 0x49, 0x44, 0x0D, 0x0A};
byte rec_pZero[] = {0x01, 0x50, 0x30, 0x02, 0x28, 0x00, 0x29, 0x03, 0x60};


byte *r_arr_names[] = {r_arr_Temp, r_arr_Vbat, r_arr_U1, r_arr_U2, r_arr_Upov, r_arr_ANG, r_arr_ANG1, r_arr_ANG2, r_arr_U3, r_arr_U4, r_arr_ANG_tot1, r_arr_ANG3, r_arr_ANG4};

int *lisa_names[] = {&lisa_temp, &lisa_Vbat, &lisa_U1, &lisa_U2, &lisa_Upov, &lisa_ANG, &lisa_ANG1, &lisa_ANG2, &lisa_U3, &lisa_U4, &lisa_ANG_tot1, &lisa_ANG3, &lisa_ANG4};

int *export_int;

int SaveTemp;

//STATES
typedef struct stc_data {
    byte *stcArr;
    int lenArr;
    byte endMarker;
    boolean check;
    int saveValue;
} STC_LIST;

typedef enum e_state_machine {
    CONNECT,
    CONF_CONNECT,
    WAIT_FOR_P0,
    FULL_CHECK_RX,
    NOT_CHECK_RX,
    SAVE_RX,
    WAIT_RX,

    READ
} enumSTAT;

typedef struct stc_state_machine {

    enumSTAT state = CONNECT;
    enumSTAT from;
    enumSTAT next;
    boolean newData = false;
    byte receivedChars[MAX_REC_ARR_LEN]; // an array to store the received data
    int LenRecArr;

    STC_LIST recArr;

} STATES;

STC_LIST arrLisaKeyRX = {
                        .stcArr = rec_LISA_key,
                        .lenArr = 10,
                        .endMarker = 0x0A,
                        .check = true
                        };

STC_LIST arrPZeroRX = { 
                        .stcArr = rec_pZero,
                        .lenArr = 9,
                        .endMarker = 0x60,
                        .check = true
                      };

STC_LIST ReadTemp = {  
                        .stcArr = send_read_temp2,
                        .lenArr = 8,
                        .endMarker = 0xFF,
                        .check = false,
                    };




#endif //param.h
